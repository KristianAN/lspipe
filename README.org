* LSPIPE
An lsp multiplexer with support for middleware.

Lspipe aims to bring multi-lsp support for clients that only support one lsp per document, such as emacs.

** Key Features
- 🔄 *Multi-LSP Support*: Connect multiple LSP servers simultaneously
- ⚡ *Backpressure Control*: Bounded queues with intelligent overflow handling
- 🧩 *Middleware Support*: Extensible architecture for request/response processing
- 🏗️ *Concurrent Architecture*: Built with Haskell STM for high-performance concurrency
- 🛡️ *Fault Tolerance*: Graceful handling of slow or unresponsive agents

* Status
Extremely WIP. Don't expect anything to work correctly yet. Currently capable of being a proxy for one lsp.

* Architecture - Data flow

#+begin_src mermaid
sequenceDiagram
    participant C as Client
    participant P as LSP Proxy
    participant A1 as Agent 1
    participant A2 as Agent 2
    
    Note over C,A2: Client Request → Agent Response Flow
    C->>P: 1. Send Request (ID: 123)
    P->>P: 2. findCapableAgents()
    P->>P: 3. Create PendingLspResponse
    P->>P: 4. Store in AgentResponseBuffer
    P->>P: 5. Queue in ClientToAgentsRequestQ
    par Fan out to capable agents
        P->>A1: 6. Forward Request (ID: 123)
    and
        P->>A2: 6. Forward Request (ID: 123)
    end
    A1->>P: 7. Response (ID: 123)
    P->>P: 8. Update AgentResponseBuffer
    A2->>P: 7. Response (ID: 123)
    P->>P: 8. Update AgentResponseBuffer
    P->>P: 9. Check if complete → Merge
    P->>C: 10. Send merged response (ID: 123)
    
    Note over C,A2: ─────────────────────────────
    Note over C,A2: Agent Request → Client Response Flow
    A1->>P: I. Send Request (ID: 456)
    P->>P: II. Store in ClientResponseBuffer
    P->>P: III. Queue in AgentToClientRequestQ
    P->>C: IV. Forward Request (ID: 456)
    C->>P: V. Response (ID: 456)
    P->>P: VI. Lookup Agent in ClientResponseBuffer
    P->>P: VII. Queue tagged response
    P->>A1: VIII. Route Response (ID: 456)
#+end_src


* Build/Develop
** Nix develop
The repository is set up with nix flake, with a flake enabled environment run
#+begin_src shell
nix develop
#+end_src
to enter a development environment.

** Nix build
The project can be built with cabal and with nix using cabal2nix under the hood.
to build simply run
#+begin_src shell
cabal build
#+end_src
or
#+begin_src shell
nix build .#lspipe
#+end_src

the service can be run with nix or with cabal
#+begin_src shell
cabal run lspipe
#+end_src
or
#+begin_src shell
nix run .#lspipe
#+end_src

* Acknowledgements
lspipe is heavily inspired by
  - [[https://github.com/blahgeek/emacs-lsp-booster][emacs-lsp-booster]]
  - [[https://github.com/thefrontside/lspx][lspx]]
