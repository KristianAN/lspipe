* LSPIPE
An lsp multiplexer with support for middleware.

Lspipe aims to bring multi-lsp support for clients that only support one lsp per document, such as emacs.

** Key Features
- üîÑ *Multi-LSP Support*: Connect multiple LSP servers simultaneously
- ‚ö° *Backpressure Control*: Bounded queues with intelligent overflow handling
- üß© *Middleware Support*: Extensible architecture for request/response processing
- üèóÔ∏è *Concurrent Architecture*: Built with Haskell STM for high-performance concurrency
- üõ°Ô∏è *Fault Tolerance*: Graceful handling of slow or unresponsive agents

* Status
Extremely WIP. Don't expect anything to work correctly yet. Currently capable of being a proxy for one lsp.

* Architecture

#+begin_src mermaid
  graph TD
    Client[LSP Client<br/>e.g., Emacs]

    subgraph LSPIPE["LSPIPE Multiplexer"]
        ClientToServer[Client‚ÜíServer Queue<br/>STM TBQueue<br/>Bounded]
        ServerToClient[Server‚ÜíClient Queue<br/>STM TQueue<br/>Unbounded]
        BackPressure{Backpressure<br/>Check}
        BusyResponse[Server Busy<br/>Response]
    end

    subgraph Agents["LSP Agents"]
        Agent1[Agent 1<br/>LSP Server]
        Agent2[Agent 2<br/>LSP Server]
        Agent3[Agent N<br/>LSP Server]
    end

    Client -->|LSP Request| BackPressure
    BackPressure -->|Queue Full| BusyResponse
    BusyResponse -->|Error Response| Client
    BackPressure -->|Queue Available| ClientToServer
    
    ClientToServer -->|Fan-out| Agent1
    ClientToServer -->|Fan-out| Agent2
    ClientToServer -->|Fan-out| Agent3

    Agent1 -->|Response| ServerToClient
    Agent2 -->|Response| ServerToClient
    Agent3 -->|Response| ServerToClient

    ServerToClient -->|Fan-in| Client
#+end_src

Lspipe uses Haskell STM queues with different characteristics for each direction:
- *Client‚ÜíServer*: Bounded `TBQueue` (capacity: 128) for backpressure control
- *Server‚ÜíClient*: Unbounded `TQueue` for responsive server communication

Each LSP server runs as an independent Agent. The client-to-server queue fans out to all agents via multiple handles, while server responses fan in through a shared unbounded queue.

#+begin_src mermaid
sequenceDiagram
    participant C as LSP Client
    participant L as LSPIPE
    participant Q1 as Client‚ÜíServer Queue
    participant A1 as Agent 1
    participant A2 as Agent 2
    participant Q2 as Server‚ÜíClient Queue

    C->>L: LSP Request (ID: 123)
    
    alt Queue has capacity
        L->>Q1: Check capacity & enqueue
        Note over Q1: TBQueue (bounded)
        Q1->>A1: Forward request
        Q1->>A2: Forward request
        
        A1->>Q2: Response (ID: 123)
        A2->>Q2: Response (ID: 123)
        Note over Q2: TQueue (unbounded)
        
        Q2->>L: Read responses
        L->>C: Forward responses
        
    else Queue is full (backpressure)
        alt Request has ID
            L->>C: Server Busy Error (ID: 123)
        else Request has no ID (notification)
            Note over L: Block until queue available
            L->>Q1: Enqueue when space available
        end
    end
#+end_src

The backpressure mechanism works as follows:
- When the client-to-server queue is full, LSPIPE checks if the request has an ID
- *Requests with ID*: Immediately respond with "Server Busy" error to maintain client responsiveness  
- *Notifications (no ID)*: Block until queue space becomes available, since they don't expect responses
- Server-to-client communication uses unbounded queues to prevent response blocking

This design ensures that:
1. Slow agents cannot overwhelm the system due to bounded client queues
2. The client receives immediate feedback when the system is under load
3. Server responses are never blocked, maintaining system responsiveness
4. Non-critical notifications don't cause client timeouts

* Build/Develop
** Nix develop
The repository is set up with nix flake, with a flake enabled environment run
#+begin_src shell
nix develop
#+end_src
to enter a development environment.

** Nix build
The project can be built with cabal and with nix using cabal2nix under the hood.
to build simply run
#+begin_src shell
cabal build
#+end_src
or
#+begin_src shell
nix build .#lspipe
#+end_src

the service can be run with nix or with cabal
#+begin_src shell
cabal run lspipe
#+end_src
or
#+begin_src shell
nix run .#lspipe
#+end_src

* Acknowledgements
lspipe is heavily inspired by
  - [[https://github.com/blahgeek/emacs-lsp-booster][emacs-lsp-booster]]
  - [[https://github.com/thefrontside/lspx][lspx]]
