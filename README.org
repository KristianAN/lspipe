* LSPIPE
An lsp multiplexer with support for middleware.

Lspipe aims to bring multi-lsp support for clients that only support one lsp per document, such as emacs.

** Key Features
- üîÑ *Multi-LSP Support*: Connect multiple LSP servers simultaneously
- ‚ö° *Backpressure Control*: Automatic flow control to prevent system overload
- üß© *Middleware Support*: Extensible architecture for request/response processing
- üèóÔ∏è *Concurrent Architecture*: Built with Haskell STM for high-performance concurrency
- üõ°Ô∏è *Fault Tolerance*: Graceful handling of slow or unresponsive agents

* Architecture

#+begin_src mermaid
  graph TD
    Client[LSP Client<br/>e.g., Emacs]

    subgraph LSPIPE["LSPIPE Multiplexer"]
        PubChan[Publish Channel<br/>STM TChannel]
        SubChan[Subscribe Channel<br/>STM TChannel]
        ReqTracker[Request Tracker<br/>ID + Agent Count]
        ResponseMap[Response Map<br/>Collects & Merges]
        BackPressure{Backpressure<br/>Check}
    end

    subgraph Agents["LSP Agents"]
        Agent1[Agent 1<br/>LSP Server]
        Agent2[Agent 2<br/>LSP Server]
        Agent3[Agent N<br/>LSP Server]
    end

    Client -->|LSP Request| BackPressure
    BackPressure -->|Under Limit| PubChan
    BackPressure -->|Over Limit| Client
    PubChan -->|Broadcast| Agent1
    PubChan -->|Broadcast| Agent2
    PubChan -->|Broadcast| Agent3

    Agent1 -->|Response| ResponseMap
    Agent2 -->|Response| ResponseMap
    Agent3 -->|Response| ResponseMap

    ResponseMap -->|All Responses<br/>Collected & Merged| SubChan
    SubChan -->|Merged Response| Client

    ReqTracker -.->|Track Request ID<br/>& Agent Count| ResponseMap
#+end_src

Lspipe uses Haskell STM TChannels where it has a publish and a subscribe channel for the client.
Lspipe refers to each LSP server as an Agent (because buzzword). The publish and subscribe channels are copied for each agent.
This means that every lsp request from the client is broadcast to all agents and every response is returned to the client.
Lspipe uses bounded channels for automatic backpressure.

#+begin_src mermaid
sequenceDiagram
    participant C as LSP Client
    participant L as LSPIPE
    participant A1 as Agent 1
    participant A2 as Agent 2
    participant A3 as Agent N

    Note over L: Check backpressure limit

    C->>L: LSP Request (ID: 123)

    alt Under backpressure limit
        Note over L: Store ID=123, Agent Count=3
        L->>A1: Broadcast Request (ID: 123)
        L->>A2: Broadcast Request (ID: 123)
        L->>A3: Broadcast Request (ID: 123)

        A1->>L: Response (ID: 123)
        A2->>L: Response (ID: 123)
        A3->>L: Response (ID: 123)

        Note over L: All responses collected<br/>Merge responses
        L->>C: Merged Response (ID: 123)
    else Over backpressure limit
        L->>C: Server Busy Error
    end
#+end_src

When a request with an ID is sent from the client the ID of the request, and the number of agents the request is broadcast to is kept track of.
Responses to the client are put in a Map like structure and once every response from the agents are returned they are merged.
The merging is done in a best effort way. Once merged they are returned to the client.

If a request from the client is sent when the backpressure limit has been reached lspipe responds with a server-busy error to the client.
This is done because not all Agents have good backpressure support and can lag when hit with too many requests for a client.
If one agent slows down this is very detrimental for lspipe as it can only respond as fast as the slowest client.

* Build/Develop
** Nix develop
The repository is set up with nix flake, with a flake enabled environment run
#+begin_src shell
nix develop
#+end_src
to enter a development environment.

** Nix build
The project can be built with cabal and with nix using cabal2nix under the hood.
to build simply run
#+begin_src shell
cabal build
#+end_src
or
#+begin_src shell
nix build .#lspipe
#+end_src

the service can be run with nix or with cabal
#+begin_src shell
cabal run lspipe
#+end_src
or
#+begin_src shell
nix run .#lspipe
#+end_src
